//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/GameInputControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputControl"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""8af7e1cf-8542-48a4-bae7-74723acac4e6"",
            ""actions"": [
                {
                    ""name"": ""SwitchTopTreadmill"",
                    ""type"": ""Button"",
                    ""id"": ""a437e14f-5fa5-4f79-885d-6c43fb8ca4b2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchLeftTreadmill"",
                    ""type"": ""Button"",
                    ""id"": ""c56100fa-f5d5-4a6a-9f09-ee0103bbf8a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SwitchRightTreadmill"",
                    ""type"": ""Button"",
                    ""id"": ""a34b05a4-9e60-4853-8324-47c44e59fa01"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ac582d2e-dd92-49a5-899e-17b71e5809b5"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SwitchLeftTreadmill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""09d9fbf8-c3af-4032-9765-16a90fbd3a8a"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SwitchLeftTreadmill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b48f734c-b5bd-4d6b-892e-6608e8911407"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SwitchTopTreadmill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f2cec0d0-0e1c-47f2-975e-ab56383e20a3"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SwitchTopTreadmill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""316c58c9-6364-4575-bfc9-3e60fb65a737"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keyboard"",
                    ""action"": ""SwitchRightTreadmill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4f25f53d-e593-4c2a-b06d-92dfc3ba0a9f"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Controller"",
                    ""action"": ""SwitchRightTreadmill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": []
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_SwitchTopTreadmill = m_Player.FindAction("SwitchTopTreadmill", throwIfNotFound: true);
        m_Player_SwitchLeftTreadmill = m_Player.FindAction("SwitchLeftTreadmill", throwIfNotFound: true);
        m_Player_SwitchRightTreadmill = m_Player.FindAction("SwitchRightTreadmill", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_SwitchTopTreadmill;
    private readonly InputAction m_Player_SwitchLeftTreadmill;
    private readonly InputAction m_Player_SwitchRightTreadmill;
    public struct PlayerActions
    {
        private @GameInputControl m_Wrapper;
        public PlayerActions(@GameInputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchTopTreadmill => m_Wrapper.m_Player_SwitchTopTreadmill;
        public InputAction @SwitchLeftTreadmill => m_Wrapper.m_Player_SwitchLeftTreadmill;
        public InputAction @SwitchRightTreadmill => m_Wrapper.m_Player_SwitchRightTreadmill;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @SwitchTopTreadmill.started += instance.OnSwitchTopTreadmill;
            @SwitchTopTreadmill.performed += instance.OnSwitchTopTreadmill;
            @SwitchTopTreadmill.canceled += instance.OnSwitchTopTreadmill;
            @SwitchLeftTreadmill.started += instance.OnSwitchLeftTreadmill;
            @SwitchLeftTreadmill.performed += instance.OnSwitchLeftTreadmill;
            @SwitchLeftTreadmill.canceled += instance.OnSwitchLeftTreadmill;
            @SwitchRightTreadmill.started += instance.OnSwitchRightTreadmill;
            @SwitchRightTreadmill.performed += instance.OnSwitchRightTreadmill;
            @SwitchRightTreadmill.canceled += instance.OnSwitchRightTreadmill;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @SwitchTopTreadmill.started -= instance.OnSwitchTopTreadmill;
            @SwitchTopTreadmill.performed -= instance.OnSwitchTopTreadmill;
            @SwitchTopTreadmill.canceled -= instance.OnSwitchTopTreadmill;
            @SwitchLeftTreadmill.started -= instance.OnSwitchLeftTreadmill;
            @SwitchLeftTreadmill.performed -= instance.OnSwitchLeftTreadmill;
            @SwitchLeftTreadmill.canceled -= instance.OnSwitchLeftTreadmill;
            @SwitchRightTreadmill.started -= instance.OnSwitchRightTreadmill;
            @SwitchRightTreadmill.performed -= instance.OnSwitchRightTreadmill;
            @SwitchRightTreadmill.canceled -= instance.OnSwitchRightTreadmill;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnSwitchTopTreadmill(InputAction.CallbackContext context);
        void OnSwitchLeftTreadmill(InputAction.CallbackContext context);
        void OnSwitchRightTreadmill(InputAction.CallbackContext context);
    }
}
