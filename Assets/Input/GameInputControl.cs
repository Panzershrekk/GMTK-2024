//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Input/GameInputControl.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @GameInputControl: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @GameInputControl()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""GameInputControl"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""8af7e1cf-8542-48a4-bae7-74723acac4e6"",
            ""actions"": [
                {
                    ""name"": ""SwitchTreadmill"",
                    ""type"": ""Value"",
                    ""id"": ""a437e14f-5fa5-4f79-885d-6c43fb8ca4b2"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9659b177-9fab-4076-8756-a3a8cdd2430b"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SwitchTreadmill"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b83e350f-f5bc-4767-9608-944d3894f00c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""QWERTY"",
                    ""action"": ""SwitchTreadmill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""56e8a3aa-373f-4bef-9906-88e350bee4f7"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""QWERTY"",
                    ""action"": ""SwitchTreadmill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""349b4d3d-3f41-419a-83e3-f309586bcbd8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""QWERTY"",
                    ""action"": ""SwitchTreadmill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""c6b70e75-4f1c-4557-a531-191e7e91f729"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""QWERTY"",
                    ""action"": ""SwitchTreadmill"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""QWERTY"",
            ""bindingGroup"": ""QWERTY"",
            ""devices"": []
        },
        {
            ""name"": ""Controller"",
            ""bindingGroup"": ""Controller"",
            ""devices"": []
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_SwitchTreadmill = m_Player.FindAction("SwitchTreadmill", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_SwitchTreadmill;
    public struct PlayerActions
    {
        private @GameInputControl m_Wrapper;
        public PlayerActions(@GameInputControl wrapper) { m_Wrapper = wrapper; }
        public InputAction @SwitchTreadmill => m_Wrapper.m_Player_SwitchTreadmill;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @SwitchTreadmill.started += instance.OnSwitchTreadmill;
            @SwitchTreadmill.performed += instance.OnSwitchTreadmill;
            @SwitchTreadmill.canceled += instance.OnSwitchTreadmill;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @SwitchTreadmill.started -= instance.OnSwitchTreadmill;
            @SwitchTreadmill.performed -= instance.OnSwitchTreadmill;
            @SwitchTreadmill.canceled -= instance.OnSwitchTreadmill;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    private int m_QWERTYSchemeIndex = -1;
    public InputControlScheme QWERTYScheme
    {
        get
        {
            if (m_QWERTYSchemeIndex == -1) m_QWERTYSchemeIndex = asset.FindControlSchemeIndex("QWERTY");
            return asset.controlSchemes[m_QWERTYSchemeIndex];
        }
    }
    private int m_ControllerSchemeIndex = -1;
    public InputControlScheme ControllerScheme
    {
        get
        {
            if (m_ControllerSchemeIndex == -1) m_ControllerSchemeIndex = asset.FindControlSchemeIndex("Controller");
            return asset.controlSchemes[m_ControllerSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnSwitchTreadmill(InputAction.CallbackContext context);
    }
}
